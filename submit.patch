diff --git a/simple_mc/src/main.rs b/simple_mc/src/main.rs
index c023f89b..1055f620 100644
--- a/simple_mc/src/main.rs
+++ b/simple_mc/src/main.rs
@@ -9,7 +9,7 @@ use rand::{
     RngCore,
 };
 use rand_pcg::Mcg128Xsl64;
-use serde::Deserialize;
+// use serde::Deserialize;
 
 const L: i16 = 10_000;
 const Q_MIN: i16 = L / 2 / 2;
@@ -304,7 +304,7 @@ fn intersect(new: &Rect, i: usize, rects: &[Rect]) -> bool {
         .any(|(j, rect)| i != j && new.intersect(rect))
 }
 
-#[derive(Debug, Deserialize)]
+// #[derive(Debug, Deserialize)]
 pub struct McParams {
     temp0: f64,
     temp1: f64,
@@ -470,14 +470,14 @@ fn main() {
         grow_d2_end: 4.294255587135436,
         rect_grow_d1_weight: 0.7882745116485163,
     };
-    let params = std::env::args()
-        .skip(1)
-        .next()
-        .and_then(|arg| Some(serde_json::de::from_str(&arg).unwrap()))
-        .unwrap_or(default_params);
+    // let params = std::env::args()
+    //     .skip(1)
+    //     .next()
+    //     .and_then(|arg| Some(serde_json::de::from_str(&arg).unwrap()))
+    //     .unwrap_or(default_params);
 
     let mut rng = Mcg128Xsl64::new(1);
-    let best = mc(params, &mut rng, &rects, &target, &size);
+    let best = mc(default_params, &mut rng, &rects, &target, &size);
     for rect in best {
         println!("{} {} {} {}", rect.x1, rect.y1, rect.x2, rect.y2);
     }
